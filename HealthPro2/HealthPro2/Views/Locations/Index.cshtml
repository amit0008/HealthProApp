<h1>Healthy Restaurants Nearby</h1>

<h3>Search, Save and Go !</h3>
<style>
    /* Always set the map height explicitly to define the size of the div
       * element that contains the map. */
    #map {
        height: 400px;
        width: 80%;
        display: inline-block;
        float: left;
    }

    #directionsPanel {
        height: 400px;
        font-family: 'Roboto','sans-serif';
        width: 20%;
        display: inline-block;
        vertical-align: top;
        float: right;
        overflow: auto;
    }

    .jumbotron {
        margin-top: 20px;
        background-size: 100% 100%;
        height: 100%;
        width: 100%;
        background-repeat: no-repeat;
        background-position: center;
    }
</style>
<br />

<div class="jumbotron" >
    <div class="row">
        <div id="directionsPanel"></div>
        <div id="map"></div>

        <script>
        var map;
        var infowindow;
        var latitude;
        var longitude;
        var coords;
        var service, pos, google, directionsService, directionsDisplay;
        function initMap() {

            // Try HTML5 geolocation.
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {
                    pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    };

                    latitude = position.coords.latitude;
                    longitude = position.coords.longitude;

                    coords = new google.maps.LatLng(latitude, longitude);
                    var contentString = 'Your Current Location';
                    var infowindow = new google.maps.InfoWindow({
                        content: contentString
                    });
                    var im = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';
                    var marker = new google.maps.Marker({
                        position: coords,
                        map: map,
                        icon: {
                            path: google.maps.SymbolPath.CIRCLE,
                            scale: 10
                        }
                    });
                    marker.addListener('mouseover', function () {
                        infowindow.open(map, marker);
                    });
                    marker.addListener('mouseout', function () {
                        infowindow.close();
                    });
                    infoWindow.setPosition(pos);
                    //loc = infowindow.getCurrentPosition();
                    //infoWindow.setContent('Your Current Location');

                    //infowindow.createMarker.
                    //infoWindow.open(map);
                    map.setCenter(pos);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());
            }

            map = new google.maps.Map(document.getElementById('map'), {
                center: coords,
                zoom: 12
            });



            clicked = null;
            //map = new google.maps.Map(document.getElementById('map'), myOptions),
            directionsService = new google.maps.DirectionsService;
            directionsDisplay = new google.maps.DirectionsRenderer;
            map = new google.maps.Map(document.getElementById('map'), {
                center: current,
                zoom: 12,
            });
            directionsDisplay.setMap(map);
            directionsDisplay.setPanel(document.getElementById("directionsPanel"));
            //directionsDisplay.setPanel(document.getElementById("map"));

            /*var styledMapType = new google.maps.StyledMapType([{ "featureType": "all", "elementType": "geometry.fill", "stylers": [{ "weight": "2.00" }] }, { "featureType": "all", "elementType": "geometry.stroke", "stylers": [{ "color": "#9c9c9c" }] }, { "featureType": "all", "elementType": "labels.text", "stylers": [{ "visibility": "on" }] }, { "featureType": "administrative.locality", "elementType": "labels.text.fill", "stylers": [{ "color": "#ac8d93" }] }, { "featureType": "landscape", "elementType": "all", "stylers": [{ "color": "#f2f2f2" }] }, { "featureType": "landscape", "elementType": "geometry.fill", "stylers": [{ "color": "#ffffff" }] }, { "featureType": "landscape.man_made", "elementType": "geometry.fill", "stylers": [{ "color": "#ffffff" }] }, { "featureType": "poi", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "road", "elementType": "all", "stylers": [{ "saturation": -100 }, { "lightness": 45 }] }, { "featureType": "road", "elementType": "geometry.fill", "stylers": [{ "color": "#eeeeee" }] }, { "featureType": "road", "elementType": "labels.text.fill", "stylers": [{ "color": "#7b7b7b" }] }, { "featureType": "road", "elementType": "labels.text.stroke", "stylers": [{ "color": "#ffffff" }] }, { "featureType": "road.highway", "elementType": "all", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "road.arterial", "elementType": "labels.icon", "stylers": [{ "visibility": "off" }] }, { "featureType": "transit", "elementType": "all", "stylers": [{ "visibility": "off" }] }, { "featureType": "water", "elementType": "all", "stylers": [{ "color": "#46bcec" }, { "visibility": "on" }] }, { "featureType": "water", "elementType": "geometry.fill", "stylers": [{ "color": "#c8d7d4" }] }, { "featureType": "water", "elementType": "labels.text.fill", "stylers": [{ "color": "#070707" }] }, { "featureType": "water", "elementType": "labels.text.stroke", "stylers": [{ "color": "#ffffff" }] }],
                { name: 'Styled Map' });*/

            var current = coords;;
            pos = current;

            //map.mapTypes.set('styled_map', styledMapType);
            //map.setMapTypeId('styled_map');



            infoWindow = new google.maps.InfoWindow({ map: map });



           // infoWindow = new google.maps.InfoWindow;



            //infowindow = new google.maps.InfoWindow();

            service = new google.maps.places.PlacesService(map);
            service.nearbySearch({
                location: { lat: -37.877010, lng: 145.044266 },
                openNow: true && false,
                radius: 3000,
                type: ['restaurant']
            }, function (results, status) {
                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    for (var i = 0; i < results.length; i++) {
                        createMarker(results[i]);
                    }
                }
            });

            geolocate();
            initAutocomplete();

        }




        function createMarker(place) {
            var placeLoc = place.geometry.location;
            var marker = new google.maps.Marker({
                map: map,
                icon: '//maps.google.com/mapfiles/ms/micons/green.png',
                position: place.geometry.location
            });




            var request = {
                reference: place.reference
            };

            service.getDetails(request, function (place, status) {
                var open = "";

                if (!place.hasOwnProperty('opening_hours')) {
                    open += "No open times provided";
                    marker.setIcon('img/greymarker.svg');
                } else if (place.opening_hours.open_now === true) {
                    open += "We are Open";
                } else {
                    open += "We are Closed";
                    marker.setIcon('//maps.google.com/mapfiles/ms/micons/red.png');
                };

                if (status === google.maps.places.PlacesServiceStatus.OK) {
                    var contentStr = '<h5>' + place.name + '</h5><p>' + place.formatted_address;
                    if (!!place)
                        contentStr += '<br>' + open;

                    if (!!place.formatted_phone_number)
                        contentStr += '<br>' + place.formatted_phone_number;
                    if (!!place.website)
                        contentStr += '<br><a target="_blank" href="' + place.website + '">' + place.website + '</a></p>';
                } else {
                    var contentStr = "<h5>No Result, status=" + status + "</h5>";
                }
                setupInfowindow(marker, infoWindow, contentStr);

            });

            function setupInfowindow(marker, infoWindow, contentStr) {
                marker.addListener('mouseover', function () {
                    infoWindow.setContent(contentStr);
                    infoWindow.open(map, this);
                });
                marker.addListener('mouseout', function () {
                    infoWindow.close();
                });
            }

            google.maps.event.addListener(marker, 'click', function () {

                clicked = marker.getPosition();
                //alert(marker.getPlaces());
                calculateAndDisplayRoute(directionsService, directionsDisplay, pos, clicked);
                console.log(clicked);

                //        clicked = {
                //            lat: this.position.lat(),
                //            lng: this.position.lng()
                //        };
            });



            $.get("@Url.Action("GetAllLocations", "Locations")", function (data, status) {
                var marker = [];
                var contentString = [];
                var infowindow = [];
                var mimage = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';
                for (var i = 0; i < data.length; i++) {
                    marker[i] = new google.maps.Marker({
                        position: { lat: data[i].Latitude, lng: data[i].Longitude },
                        map: map,
                        icon: mimage
                    });

                    contentString[i] = data[i].Description ;

                    infowindow[i] = new google.maps.InfoWindow({
                        content: contentString[i]
                    });


                    var markerValue = marker[i];
                    google.maps.event.addListener(marker[i], 'mouseover', (function (markerValue, i) {
                        return function () {
                            infowindow[i].open(map, marker[i]);
                        }
                    })(marker[i], i));

                    google.maps.event.addListener(marker[i], 'mouseout', (function (markerValue, i) {
                        return function () {
                            infowindow[i].close();
                        }
                    })(marker[i], i));

                    google.maps.event.addListener(marker[i], 'click', (function (markerValue, i) {
                        return function () {
                            clicked1 = marker[i].getPosition();
                            calculateAndDisplayRoute(directionsService, directionsDisplay, pos, clicked1);
                        }
                    })(marker[i], i));

                    /*google.maps.event.addListener(marker[i], 'click', function () {
                        clicked1 = marker[i].getPosition();
                        calculateAndDisplayRoute(directionsService, directionsDisplay, pos, clicked1);
                    });*/
                }
            })




           /* google.maps.event.addListener(map, "click", function (event) {
                var p = new google.maps.LatLng(event.latLng.lat(), event.latLng.lng());


            });*/
        }





        function geolocate() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function (position) {

                    pos = {
                        lat: position.coords.latitude,
                        lng: position.coords.longitude
                    }


                    new google.maps.Marker({
                        map: map,
                        icon: '//maps.google.com/mapfiles/ms/micons/blue.png',
                        position: pos
                    });

                    infoWindow.setPosition(pos);
                    infoWindow.setContent('Location found.');

                    map.setCenter(pos);
                    map.setZoom(14);
                }, function () {
                    handleLocationError(true, infoWindow, map.getCenter());
                });
            } else {
                // Browser doesn't support Geolocation
                handleLocationError(false, infoWindow, map.getCenter());

            }

        }



        function initAutocomplete() {

            // Create the search box and link it to the UI element.
            var input = document.getElementById('pac-input');
            var searchBox = new google.maps.places.SearchBox(input);
            //map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

            // Bias the SearchBox results towards current map's viewport.
            map.addListener('bounds_changed', function () {
                searchBox.setBounds(map.getBounds());
            });

            var markers = [];
            // Listen for the event fired when the user selects a prediction and retrieve
            // more details for that place.
            searchBox.addListener('places_changed', function () {
                var places = searchBox.getPlaces();

                if (places.length === 0) {
                    return;
                }

                // Clear out the old markers.
                markers.forEach(function (marker) {
                    marker.setMap(null);
                });
                markers = [];

                // For each place, get the icon, name and location.
                var bounds = new google.maps.LatLngBounds();
                places.forEach(function (place) {
                    if (!place.geometry) {
                        console.log("Returned place contains no geometry");
                        return;
                    }

                    var searched = {
                        lat: place.geometry.location.lat(),
                        lng: place.geometry.location.lng()
                    };

                    infoWindow.setPosition(searched);
                    infoWindow.setContent('Location found.');
                    map.setCenter(searched);
                    map.setZoom(14);

                    // Create a marker for each place.
                    markers.push(new google.maps.Marker({
                        map: map,
                        icon: 'http://maps.google.com/mapfiles/ms/micons/blue.png',
                        title: place.name,
                        position: place.geometry.location
                    }));


                    if (place.geometry.viewport) {
                        // Only geocodes have viewport.
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
            });
        }


        function calculateAndDisplayRoute(directionsService, directionsDisplay, pos, clicked) {

            directionsService.route({
                origin: pos,
                destination: clicked,
                avoidTolls: true,
                avoidHighways: false,
                travelMode: 'BICYCLING'
            }, function (response, status) {
                console.log(response, status);
                if (status === google.maps.DirectionsStatus.OK) {
                    directionsDisplay.setDirections(response);
                } else {
                    window.alert('Directions request failed due to ' + status);
                }
            });
        }

        //if browser doesn't have geolocation then search box shows
        function handleLocationError() {
            //  $(".input__wrapper").show();


            pos = {
                lat: position.coords.latitude,
                lng: position.coords.longitude
            };

            new google.maps.Marker({
                map: map,
                icon: 'http://maps.google.com/mapfiles/ms/micons/blue.png',
                position: pos
            });

            infoWindow.setPosition(pos);
            infoWindow.setContent('Location found.');

            map.setCenter(pos);
            map.setZoom(14);

        }
        function handleLocationError(browserHasGeolocation, infoWindow, pos) {
            infoWindow.setPosition(pos);
            infoWindow.setContent(browserHasGeolocation ?
                'Error: The Geolocation service failed.' :
                'Error: Your browser doesn\'t support geolocation.');
            infoWindow.open(map);
    }




        </script>
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyB2iC8zOTStAf5D1GLpFG9pJWRM6ss67vE&callback=initMap&libraries=places"
                async defer></script>

    </div>




    @model IEnumerable<HealthPro2.Models.Location>

    @{
        ViewBag.Title = "Index";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }


    <br />
    <p>
        @Html.ActionLink("Are you at your favorite place.Save now !", "Create")
    </p>
    <br />
    <h3> Your Saved Healthy Restarants </h3>
    <br />
    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Latitude)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Longitude)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td width="400px" style="text-align:justify">
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Latitude)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Longitude)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }

    </table>
</div>